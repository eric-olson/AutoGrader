<script>

var close_requests = 0;

function fillHiddenEditorText() {
  $('#editor-text-hidden').val(getEditorContents());
}

function getEditorContents() {
  return editor.getValue();
}

function stopResizing() {
  $('#editor').stop();
  $('#descriptionPanel').stop();
  $('#description').stop();
}

function resizeToSmaller() {
  stopResizing();
  $('#editor').height($(window).height() - 287);
  $('#descriptionPanel').height($(window).height() - 250);
  $('#description').height($(window).height() - 360);
}

function resizeToFull() {
  stopResizing();
  $('#editor').height($(window).height() - 227);
  $('#descriptionPanel').height($(window).height() - 190);
  $('#description').height($(window).height() - 300);
}

function resizeToFullAnimated() {
  stopResizing();
  $('#editor').animate({height:$(window).height() - 227}, 500);
  $('#descriptionPanel').animate({height:$(window).height() - 190}, 500);
  $('#description').animate({height:$(window).height() - 300}, 500);
}

function getAnimatedProgressBar() {
  return '<div class="progress-bar progress-bar-striped active progress-bar-testing" role="progressbar">Running Tests</div>';
}

function getServerErrorProgressBar() {
  return '<div class="progress-bar progress-bar-error" role="progressbar">Server Error</div>';
}

// message can be whatever
// alert_class must be one of:
//    alert-success
//    alert-info
//    alert-warning
//    alert-danger
function buildAlertBox(message, alert_class) {
  resizeToSmaller();
  autoCloseAlert();

  return '<div class="alert ' + alert_class + ' fade in"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>' + message + '</div>'
}

function buildAlertBoxSuccess(message) {
  return buildAlertBox(message, "alert-success");
}

function buildAlertBoxInfo(message) {
  return buildAlertBox(message, "alert-info");
}

function buildAlertBoxWarning(message) {
  return buildAlertBox(message, "alert-warning");
}

function buildAlertBoxDanger(message) {
  return buildAlertBox(message, "alert-danger");
}

function hasAlert() {
  return $('.alert').length == 1;
}

function requestClose() {
  close_requests++;
}

function suppressRequest() {
  close_requests--;
}

function shouldClose() {
  return close_requests == 1;
}

function autoCloseAlert() {
  requestClose();
  window.setTimeout(function() {
    if (shouldClose()) {
      resizeToFullAnimated();
      $(".alert").slideUp(500, function(){
        $(this).remove();
      });
    }
    suppressRequest();
  }, 2000);
}

var editor = ace.edit("editor");
editor.$blockScrolling = Infinity;

$( document ).ready(function() {
  if (hasAlert()) {
    is_full_size = false;
  } else {
    is_full_size = true;
  }

  //listen for changes
  $(window).resize(function() {
    if (hasAlert()) {
      resizeToSmaller();
    } else {
      resizeToFull();
    }
  });

  //set initially
  if (hasAlert()) {
    autoCloseAlert();
    resizeToSmaller();
  } else {
    resizeToFull();
  }

  editor.setTheme("ace/theme/chrome");
  editor.getSession().setMode("ace/mode/c_cpp");

  $('[data-toggle="tooltip"]').tooltip();

});

$('#test_btn').on('click', function() {
  $('#progress_bar_container').html(getAnimatedProgressBar());

  $.ajax({
    type: 'post',
    url: 'testCode',
    data: {editor_text:getEditorContents(),id:<%=@assignment.id%>},
    success: function(response) {
      // Load the progress bar with the html from the response
      $('#progress_bar_container').html(response.progress_bar_html);
      // Enable popovers
      $('[data-toggle="popover"]').popover();
    },
    error: function(jqXHR, textStatus, errorThrown) {
      $('#progress_bar_container').html(getServerErrorProgressBar());
    }
  });
  return false;
});

$('#submit_btn').on('click', function() {
  $('#progress_bar_container').html(getAnimatedProgressBar());

  $.ajax({
    type: 'post',
    url: 'submitCode',
    data: {editor_text:getEditorContents(),id:<%=@assignment.id%>},
    success: function(response) {
      // Load the progress bar with the html from the response
      $('#progress_bar_container').html(response.progress_bar_html);
      // Enable popovers
      $('[data-toggle="popover"]').popover();
    },
    error: function(jqXHR, textStatus, errorThrown) {
      $('#progress_bar_container').html(getServerErrorProgressBar());
    }
  });
  return false;
});

$('#btn-save').on('click', function() {
  $.ajax({
    type: 'post',
    url: 'saveCode',
    data: {editor_text:getEditorContents(),id:<%=@assignment.id%>},
    success: function(response) {
      $('#status_div').html(buildAlertBox("File saved successfully!", "alert-success"));
    }
  });
});

$('#btn-restart').on('click', function() {
  $.ajax({
    type: 'post',
    url: 'restartCode',
    data: {editor_text:getEditorContents(),id:<%=@assignment.id%>},
    success: function(response) {
      $('#status_div').html(buildAlertBox("Reset file to the default spec.", "alert-success"));
      editor.setValue(response.new_editor_content, -1);
    }
  });
});

$('#btn-download').on('click', function() {
  fillHiddenEditorText();
});

$('#btn-download-yes').on('click', function() {
  $('#download_modal').modal('hide');
});

$('#btn-download-no').on('click', function() {
  $('#download_modal').modal('hide');
});

</script>
